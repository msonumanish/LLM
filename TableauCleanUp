import os
import zipfile
from lxml import etree as ET
import tableauserverclient as TSC

# ---------------------------------------
# CONFIG
# ---------------------------------------
TABLEAU_SERVER = "https://your-tableau-server.com"
USERNAME = "your-username"
PASSWORD = "your-password"
SITE_ID = ""  # leave empty for Default site
SAVE_PATH = "./cleaned_xml"   # where cleaned XMLs will be stored

# Ensure save directory exists
os.makedirs(SAVE_PATH, exist_ok=True)

# ---------------------------------------
# HELPER: Clean Tableau TWB XML
# ---------------------------------------
def clean_xml(twb_file, output_file):
    """
    Clean Tableau TWB XML:
    - Remove unnecessary tags (thumbnails, images, styles, formatting, user personalization, etc.)
    - Strip hardcoded filter values
    - Keep only metadata structure useful for summarization
    """
    parser = ET.XMLParser(remove_blank_text=True, recover=True, encoding="utf-8")
    tree = ET.parse(twb_file, parser=parser)
    root = tree.getroot()

    # Tags commonly safe to remove
    remove_tags = [
        "style", "window", "window-info", "repository-location",
        "color-palette", "color", "format", "annotation",
        "thumbnails", "thumbnail", "formatted-text", "repository-url",
        "custom-views", "user", "metadata-record", "image", "picture",
        "graphic", "map-source", "map"
    ]

    for tag in remove_tags:
        for elem in root.findall(f".//{tag}"):
            parent = elem.getparent()
            if parent is not None:
                parent.remove(elem)

    # Remove noisy attributes (visual formatting)
    noisy_attributes = ["style", "color", "font", "caption", "alias"]
    for elem in root.iter():
        for noisy_attr in noisy_attributes:
            if noisy_attr in elem.attrib:
                elem.attrib.pop(noisy_attr, None)

    # Clean filter values (keep filter but drop values)
    for filter_elem in root.findall(".//filter"):
        for values in filter_elem.findall(".//groupfilter/domain/*"):
            parent = values.getparent()
            if parent is not None:
                parent.remove(values)
        for values in filter_elem.findall(".//filter-item"):
            parent = values.getparent()
            if parent is not None:
                parent.remove(values)

    # Write cleaned XML
    tree.write(output_file, encoding="utf-8", pretty_print=True, xml_declaration=True)
    print(f"✅ Cleaned XML written to {output_file}")


# ---------------------------------------
# HELPER: Extract TWB from TWBX
# ---------------------------------------
def extract_twb_from_twbx(twbx_file, output_folder):
    """
    Extracts the .twb file from a .twbx archive
    """
    with zipfile.ZipFile(twbx_file, 'r') as z:
        for file in z.namelist():
            if file.endswith(".twb"):
                z.extract(file, output_folder)
                return os.path.join(output_folder, file)
    return None


# ---------------------------------------
# MAIN: Crawl Tableau, Download, Clean
# ---------------------------------------
def crawl_and_extract():
    tableau_auth = TSC.TableauAuth(USERNAME, PASSWORD, SITE_ID)
    server = TSC.Server(TABLEAU_SERVER, use_server_version=True)

    with server.auth.sign_in(tableau_auth):
        all_workbooks, pagination_item = server.workbooks.get()
        print(f"Found {pagination_item.total_available} workbooks")

        for workbook in all_workbooks:
            print(f"Processing workbook: {workbook.name}")

            file_path = os.path.join(SAVE_PATH, f"{workbook.name}")
            server.workbooks.download(workbook.id, filepath=file_path, no_extract=True)

            # Case 1: Direct TWB
            if file_path.endswith(".twb"):
                cleaned_path = os.path.join(SAVE_PATH, f"{workbook.name}_cleaned.twb")
                clean_xml(file_path, cleaned_path)

            # Case 2: TWBX → extract TWB → clean
            elif file_path.endswith(".twbx"):
                extracted_twb = extract_twb_from_twbx(file_path, SAVE_PATH)
                if extracted_twb:
                    cleaned_path = os.path.join(SAVE_PATH, f"{workbook.name}_cleaned.twb")
                    clean_xml(extracted_twb, cleaned_path)

            print(f"✅ Finished processing {workbook.name}")


if __name__ == "__main__":
    crawl_and_extract()
